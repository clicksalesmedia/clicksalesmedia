generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            UserRole         @default(USER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  blogPosts       BlogPost[]
  caseStudies     CaseStudy[]
  portfolios      Portfolio[]
  sessions        Session[]
  trackingScripts TrackingScript[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlogPost {
  id         String     @id @default(cuid())
  title      String
  slug       String     @unique
  content    String
  excerpt    String?
  coverImage String?
  published  Boolean    @default(false)
  authorId   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  contentAr  String?
  excerptAr  String?
  titleAr    String?
  author     User       @relation(fields: [authorId], references: [id])
  categories Category[] @relation("BlogPostToCategory")
}

model CaseStudy {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  clientName  String
  description String
  challenge   String
  solution    String
  results     String
  coverImage  String?
  gallery     String[]
  services    String[]
  published   Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
}

model Contact {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String?
  company   String?
  message   String
  status    ContactStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Portfolio {
  id            String        @id @default(cuid())
  title         String
  slug          String        @unique
  clientName    String
  description   String
  coverImage    String
  gallery       String[]
  projectType   PortfolioType
  results       String?
  metrics       Json?
  techStack     String[]
  url           String?
  published     Boolean       @default(false)
  featured      Boolean       @default(false)
  authorId      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  clientNameAr  String?
  descriptionAr String?
  resultsAr     String?
  titleAr       String?
  author        User          @relation(fields: [authorId], references: [id])
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  posts     BlogPost[] @relation("BlogPostToCategory")
}

model SEOSettings {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  pageUrl       String    @unique
  title         String
  description   String
  keywords      String
  ogTitle       String?
  ogDescription String?
  ogImage       String?
  canonical     String?
  robotsTxt     String?
  sitemap       String?
  schema        Json?
  metaTags      MetaTag[]
}

model MetaTag {
  id           String      @id @default(cuid())
  name         String
  content      String
  seoSettingId String
  seoSetting   SEOSettings @relation(fields: [seoSettingId], references: [id], onDelete: Cascade)
}

model SitemapEntry {
  id         String   @id @default(cuid())
  url        String   @unique
  priority   Float    @default(0.5)
  changefreq String   @default("weekly")
  lastmod    DateTime @default(now())
}

model SEOAnalytics {
  id        String   @id @default(cuid())
  pageUrl   String
  pageSpeed Json?
  rankings  Json?
  keywords  Json?
  backlinks Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lead {
  id        String     @id @default(cuid())
  name      String
  email     String
  company   String?
  phone     String?
  message   String?
  source    String?
  status    LeadStatus @default(LEAD)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Meeting {
  id            String        @id @default(cuid())
  name          String
  email         String
  company       String?
  phone         String?
  message       String?
  service       String?
  date          DateTime
  time          String
  duration      Int           @default(60)
  status        MeetingStatus @default(PENDING)
  googleEventId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([date, time])
}

model TrackingScript {
  id                String        @id @default(cuid())
  name              String
  type              String
  provider          String
  script            String
  active            Boolean       @default(true)
  location          String
  loadType          String
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  lastVerified      DateTime?
  triggerConditions Json?
  userId            String?
  logs              TrackingLog[]
  user              User?         @relation(fields: [userId], references: [id])
}

model TrackingLog {
  id               String          @id @default(cuid())
  trackingScriptId String?
  action           String
  timestamp        DateTime        @default(now())
  userEmail        String
  details          String?
  trackingScript   TrackingScript? @relation(fields: [trackingScriptId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum PortfolioType {
  WEBSITE
  SEO
  PPC
  SOCIAL_MEDIA
  EMAIL_MARKETING
  CONTENT_MARKETING
  BRANDING
  OTHER
}

enum LeadStatus {
  LEAD
  MQL
  SQL
  CUSTOMER
}

enum MeetingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
