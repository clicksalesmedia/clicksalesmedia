// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole   @default(USER)
  accounts      Account[]
  sessions      Session[]
  blogPosts     BlogPost[]
  caseStudies   CaseStudy[]
  portfolios    Portfolio[]
  trackingScripts TrackingScript[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  titleAr     String?
  slug        String   @unique
  content     String   @db.Text
  contentAr   String?  @db.Text
  excerpt     String?  @db.Text
  excerptAr   String?  @db.Text
  coverImage  String?
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CaseStudy {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  clientName  String
  description String   @db.Text
  challenge   String   @db.Text
  solution    String   @db.Text
  results     String   @db.Text
  coverImage  String?
  gallery     String[] // Array of image URLs
  services    String[] // Array of services provided
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  company   String?
  message   String   @db.Text
  status    ContactStatus @default(NEW)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Portfolio {
  id          String       @id @default(cuid())
  title       String
  titleAr     String?
  slug        String       @unique
  clientName  String
  clientNameAr String?
  description String       @db.Text
  descriptionAr String?    @db.Text
  coverImage  String
  gallery     String[]     // Array of image URLs
  projectType PortfolioType
  results     String?      @db.Text
  resultsAr   String?      @db.Text
  metrics     Json?        // For storing metrics data like conversions, clicks, etc.
  techStack   String[]     // For website projects - technologies used
  url         String?      // URL to live project if applicable
  published   Boolean      @default(false)
  featured    Boolean      @default(false)
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  posts     BlogPost[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum PortfolioType {
  WEBSITE
  SEO
  PPC
  SOCIAL_MEDIA
  EMAIL_MARKETING
  CONTENT_MARKETING
  BRANDING
  OTHER
}

model SEOSettings {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pageUrl     String   @unique
  title       String
  description String   @db.Text
  keywords    String   @db.Text
  ogTitle     String?
  ogDescription String? @db.Text
  ogImage     String?
  canonical   String?
  robotsTxt   String?  @db.Text
  sitemap     String?
  schema      Json?
  metaTags    MetaTag[]
}

model MetaTag {
  id          String   @id @default(cuid())
  name        String
  content     String   @db.Text
  seoSetting  SEOSettings @relation(fields: [seoSettingId], references: [id], onDelete: Cascade)
  seoSettingId String
}

model SitemapEntry {
  id          String   @id @default(cuid())
  url         String   @unique
  priority    Float    @default(0.5)
  changefreq  String   @default("weekly")
  lastmod     DateTime @default(now())
}

model SEOAnalytics {
  id          String   @id @default(cuid())
  pageUrl     String
  pageSpeed   Json?
  rankings    Json?
  keywords    Json?
  backlinks   Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum LeadStatus {
  LEAD
  MQL
  SQL
  CUSTOMER
}

model Lead {
  id        String     @id @default(cuid())
  name      String
  email     String
  company   String?
  phone     String?
  message   String?    @db.Text
  source    String?
  status    LeadStatus @default(LEAD)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum MeetingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Meeting {
  id            String        @id @default(cuid())
  name          String
  email         String
  company       String?
  phone         String?
  message       String?       @db.Text
  service       String?
  date          DateTime
  time          String
  duration      Int           @default(60) // Duration in minutes
  status        MeetingStatus @default(PENDING)
  googleEventId String?       // For Google Calendar integration
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@unique([date, time]) // Ensure no double bookings at the same time slot
}

// Tracking System Models
model TrackingScript {
  id               String        @id @default(cuid())
  name             String
  type             String        // analytics, conversion, remarketing, pixel, tag_manager, custom
  provider         String        // google, meta, linkedin, twitter, other
  script           String        @db.Text
  active           Boolean       @default(true)
  location         String        // head, body, custom
  loadType         String        // sync, async, defer
  notes            String?       @db.Text
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  lastVerified     DateTime?
  triggerConditions Json?
  userId           String?
  user             User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  logs             TrackingLog[]
}

model TrackingLog {
  id               String        @id @default(cuid())
  trackingScriptId String?
  trackingScript   TrackingScript? @relation(fields: [trackingScriptId], references: [id], onDelete: SetNull)
  action           String        // added, modified, activated, deactivated, deleted, verified
  timestamp        DateTime      @default(now())
  userEmail        String
  details          String?
}
